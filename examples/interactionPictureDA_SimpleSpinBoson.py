import numpy as np
from scipy.optimize import curve_fit
# from fishbonett.starSpinBoson import SpinBoson, SpinBoson1D
from fishbonett.backwardSpinBoson import SpinBoson, SpinBoson1D, calc_U
from fishbonett.stuff import sigma_x, sigma_z, temp_factor, sd_zero_temp, drude1, lemmer, drude, _num, sigma_1
from scipy.linalg import expm
from time import time

bath_length = 400
phys_dim = 20
bond_dim = 1000
a = [np.ceil(phys_dim - N*(phys_dim -2)/ bath_length) for N in range(bath_length)]
a = [int(x) for x in a]

coup_num = [59.84994127871965, 61.66704009354789, 7.011785216833802, 78.77521434533048, 8.171145858165639, 59.05457588659125, 15.849387748187969, 23.025571268549193, 8.505390409593835, 28.017221408467357, 58.71098819385494, 16.650023929825245, 152.26677091682544, 30.525333661319273, 22.277290825033443, 103.80497977824788, 396.7922926669688, 113.15354980350207, 103.02306526387049, 35.94558765525812, 229.00272076186073, 293.5000894063778, 5.480295190474774, 340.99075647841187, 172.84256731226958, 353.88530241823446, 160.516359971217, 49.57783898237036, 122.25968743458789, 344.3107208587671, 303.59718020830474, 464.8785204721942, 54.78344149137495, 10.12594571101241, 5.648337003940801, 42.75881553379607, 45.48437384073163, 80.80282716801817, 33.973689941761634, 55.138336134383096, 0.05920600654168548, 7.62338151849298, 6.6234189168972, 131.49661010045185, 35.34604309531244, 177.21838914736026, 147.8894882785531, 242.6689423898624, 39.8628827517839, 53.487688269558475, 79.1826951869331, 46.7666404823502, 383.5745033573158, 31.29912903993616, 11.30372294694537, 137.32597040984868, 74.5994861681343, 51.40132770220918, 254.20503815672032, 22.87753366947293, 64.31630421059353, 56.296412464479374, 29.213957511906102, 30.113338024544408, 33.389519291221184, 3.2765609338424455, 33.56927908893237, 41.73628943645877, 41.94052126008237, 5.359156301414911, 9.009680733810544, 40.995517755753966, 20.92768217022016, 3.7190822839231292, 39.12121148369953, 38.57750850535116, 37.77467053157194, 49.219330504613225, 86.58927216763077, 2.871073712439836, 95.64114901020663, 6.301883550455036, 545.9914204640095, 9.332562704051451, 25.66855889426229, 76.42566268099256, 404.19799925607236, 32.10808138297639, 154.50278190500495, 10.962232065387797, 0.7549540927707121, 1.310732966340496, 27.317755711365137, 659.494394389791, 8.657087594550866, 6.425843257293185, 20.96246163996642, 30.825145561299422, 360.9680230147334, 162.29534862455725, 176.12144849652466, 177.01259600663468, 28.801624722279463, 49.44509893318607, 57.675674408111355, 34.066907451016064, 194.23065509521672, 24.930501333233526, 5.672206186358625, 28.655599140029093, 10.70586713504537, 36.02736011975566, 90.35798880566847, 129.4157904613534, 60.42954728150534, 74.10759169167457, 151.6450579389134, 7.889034109688339, 113.52929898693309, 330.6679718364806, 886.4420470493934, 42.738100540941105, 42.86905957725456, 14.59858078800632, 101.72332743331889, 66.80575910012391, 7.746626353902067, 6.404524219477675, 98.33964846870705, 278.0036858572567, 421.52462412626215, 21.071495242219104, 89.2985179314002, 436.3585018019819, 171.38120126959674, 15.740163991660136, 102.94220453895377, 75.5847633353461, 226.5088378509594, 238.24262089463525, 201.80830273766256, 1801.296736614668, 6.1805503007001645, 12.960701249255552, 91.51433980463753, 6.714643977209521, 34.576340978770546, 118.6943783473699, 36.28885205408745, 91.95190411485741, 37.33951698291298, 113.47105025982773, 54.61640441367153, 1.8774537943610492, 62.091579016127284, 25.923935821663374, 158.68580168723255, 36.45711896964324, 257.9834518386855, 515.7752517204467, 62.31397195565193, 315.7392390831518]
freq_num = [18.572, 21.72, 37.891, 52.565, 60.615, 64.971, 80.889, 88.074, 112.592, 138.551, 142.569, 146.516, 166.674, 204.207, 216.366, 239.614, 280.029, 283.257, 287.474, 303.598, 321.116, 329.261, 376.791, 387.75, 399.812, 406.454, 417.961, 422.804, 454.782, 458.857, 471.95, 477.893, 488.212, 512.784, 525.628, 529.697, 533.97, 556.442, 578.298, 602.653, 607.755, 616.107, 631.276, 640.419, 650.535, 665.203, 673.497, 686.587, 692.573, 715.989, 744.641, 745.447, 746.097, 751.97, 776.837, 787.433, 791.605, 804.413, 810.68, 815.982, 832.808, 834.649, 838.626, 866.385, 870.666, 880.604, 889.432, 892.693, 901.346, 914.698, 919.939, 935.008, 940.838, 943.514, 947.791, 964.873, 965.818, 968.934, 978.138, 999.553, 1002.582, 1007.554, 1021.853, 1034.193, 1046.335, 1063.733, 1077.217, 1081.99, 1114.781, 1121.615, 1130.876, 1142.351, 1153.189, 1157.406, 1170.153, 1181.259, 1182.627, 1185.69, 1194.825, 1207.159, 1213.832, 1220.851, 1227.325, 1230.285, 1240.632, 1243.084, 1246.538, 1286.335, 1296.583, 1299.631, 1318.441, 1323.998, 1339.241, 1346.992, 1356.183, 1361.592, 1377.941, 1385.155, 1389.363, 1423.826, 1431.468, 1445.447, 1467.45, 1479.565, 1489.173, 1513.744, 1516.389, 1521.855, 1537.489, 1561.151, 1561.342, 1609.616, 1630.399, 1636.994, 1642.361, 1666.601, 1678.231, 1689.423, 1696.969, 1726.421, 1767.586, 1811.44, 3163.242, 3164.383, 3184.283, 3192.012, 3192.347, 3193.251, 3196.395, 3197.736, 3202.845, 3203.702, 3204.149, 3207.079, 3207.153, 3214.243, 3218.764, 3219.128, 3219.477, 3223.965, 3234.558, 3235.424]
low_freq_num = 0
freq_num = freq_num[low_freq_num:]
coup_num = coup_num[low_freq_num:]

a = [phys_dim]*bath_length
print(a)

pd = a[::-1] + [2]
eth = SpinBoson(pd)
etn = SpinBoson1D(pd)
# set the initial state of the system. It's in the high-energy state |0>:

etn.B[-1][0, 1, 0] = 0.
etn.B[-1][0, 0, 0] = 1.


# spectral density parameters
g = 3500
eth.domain = [-g, g]
temp = 226.00253972894595*0.5*1
temp = 5

def lorentzian (w, wi, delta, ki):
    return np.pi * (ki**2/np.pi/wi) * w * delta/((w-wi)**2 + delta**2)

j = lambda w: sum([lorentzian(w, wi=freq_num[i], delta=107, ki=coup_num[i]) for i in range(len(freq_num))])*temp_factor(temp,w)

j_list = np.array([j(w) for w in range(1, 3000,30)])
print(repr(j_list))

eth.sd = j

eth.he_dy = (sigma_z - sigma_1)/2
eth.h1e =  (4540.90144  - 4127.9476)* (sigma_z - sigma_1)/2 + 34.56223*sigma_x

eth.build(g=1., ncap=20000)
# print(eth.w_list,eth.k_list)
#
# print(len(eth.w_list))
# exit()

# b = np.array([np.abs(eth.get_dk(t=i*0.2/100)) for i in range(1)])
# bj, freq, coef = eth.get_dk(1, star=True)
# indexes = np.abs(freq).argsort()
# bj = bj[indexes]
# bj = np.array(bj)
# print(b.shape)
# b.astype('float32').tofile('./DA2/dk.dat')
# bj.astype('float32').tofile('./output/j0.dat')
# freq.astype('float32').tofile('./output/freq.dat')
# coef.astype('float32').tofile('./DA2/coef.dat')
# print(coef.shape)
# print(repr(freq))
# print(repr(bj))


print(eth.w_list)
print(eth.k_list)


# U_one = eth.get_u(dt=0.002, t=0.2)

# ~ 0.5 ps ~ 0.1T
p = []


threshold = 1e-4
dt = 0.001/4
num_steps = 50*4

s_dim = np.empty([0,0])
num_l = np.empty([0,0])
t = 0.
tt0=time()
for tn in range(num_steps):
    U1, U2 = eth.get_u(2*tn*dt, 2*dt, factor=2)

    t0 = time()
    etn.U = U1
    for j in range(bath_length-1,0,-1):
        print("j==", j, tn)
        etn.update_bond(j, bond_dim, threshold, swap=1)

    etn.update_bond(0, bond_dim, threshold, swap=0)
    etn.update_bond(0, bond_dim, threshold, swap=0)
    t1 = time()
    t = t + t1 - t0

    t0 = time()
    etn.U = U2
    for j in range(1, bath_length):
        print("j==", j, tn)
        etn.update_bond(j, bond_dim, threshold,swap=1)

    dim = [len(s) for s in etn.S]
    s_dim = np.append(s_dim, dim)
    print("Length", len(dim))
    theta = etn.get_theta1(bath_length) # c.shape vL i vR
    rho = np.einsum('LiR,LjR->ij',  theta, theta.conj())
    sigma_z= sigma_z

    pop = np.einsum('ij,ji', rho, sigma_z)
    p = p + [pop]
    t1 = time()
    t = t + t1 - t0
    numExp = []
    for i, pd in enumerate(a[::-1]):
        theta = etn.get_theta1(i)
        rho = np.einsum('LiR,LjR->ij', theta, theta.conj())
        numExp.append(np.einsum('ij,ji', rho, _num(pd)).real)
    num_l = np.append(num_l, numExp)
tt1 = time()
print(tt1-tt0)
pop = [x.real for x in p]
print("population", pop)
pop = np.array(pop)

s_dim.astype('float32').tofile('./DA2/dim.dat')
pop.astype('float32').tofile('./DA2/pop.dat')
num_l.astype('float32').tofile('./DA2/num_ic.dat')