import numpy as np
from fishbonett.backwardSpinBosonMultiChannel import SpinBoson, SpinBoson1D, calc_U
from fishbonett.stuff import sigma_x, sigma_z, temp_factor, sd_zero_temp, drude1, lemmer, drude, _num, sigma_1
from time import time

bath_length = 162+200
phys_dim = 20
bond_dim = 1000
a = [np.ceil(phys_dim - N*(phys_dim -2)/ bath_length) for N in range(bath_length)]
a = [int(x) for x in a]

a = [phys_dim]*bath_length
print(a)
pd = a[::-1] + [2]
coup_num_1 = [22.87208, -5.10531, -4.28719, 3.8601, -3.83818, -14.34437, -4.15779, 0.2489, -32.66833, 2.7068, -3.46199, -1.77908, -29.64192, 7.10642, -13.89889, -6.03304, 66.28702, 24.1279, 33.37544, 21.71101, -9.01773, 10.15688, -55.98164, 41.1621, 65.82669, 219.75465, 16.41902, 0.31749, 28.49923, -38.21912, 2.01525, -4.50427, 92.59139, 9.81323, -35.68768, 7.9295, 8.27103, 10.25305, 6.57326, -11.1044, -11.17794, 0.88247, 41.63233, 23.15775, -85.27496, 33.38605, -4.74469, 32.59479, -55.12039, 80.44047, 36.30003, -3.24138, -12.10284, -57.3605, 31.6798, 28.41721, -14.59751, -25.80586, 19.08764, -10.00132, 1.77979, -52.98917, 37.65909, -39.50747, 16.91541, 0.0, -3.14663, -1.8901, 35.19624, -11.05915, -5.9694, -2.65872, -33.55222, -25.29957, 3.45775, 29.54999, 45.91598, -2.12556, 0.70994, 0.0, -35.13331, 42.34509, -42.59541, -9.50493, -8.14375, -23.71353, 173.40521, 18.05668, -9.53746, 12.80712, 7.28674, 2.4374, -28.60954, 36.15296, 0.0, -8.35093, 2.51589, -153.14519, 252.22287, 82.85594, 5.14632, -6.94096, 6.07829, -20.89076, 18.44276, -16.76692, -91.11283, 2.67074, 546.19544, -115.47619, -377.02934, 37.92921, 8.55953, -37.17402, -6.71186, -16.37235, -0.97934, -464.27217, 90.62281, 5.06642, 6.08819, -632.59258, 597.32138, 6.36396, 58.72522, -11.79171, 48.5252, 82.70604, -7.69191, -5.64978, 959.04893, -76.06701, -199.0647, -14.14496, -77.44587, -136.71485, 78.08934, 0.0, -66.62007, 9.77504, 26.25346, -91.93307, 33.54868, -6.71398, -11.26421, 0.0, -6.76701, 4.51417, -9.03682, -27.12744, -13.56796, 0.0, 0.0, 0.0, 2.2684, 24.96794, -9.08774, 40.89481, -22.76177, 15.95799, 13.68676, 77.58234]
coup_num_2 = [23.19452, -46.10336, -3.8311, 80.68725, -40.84319, -7.79585, 12.59216, 12.88066, -56.85139, -52.176, 20.05921, 32.33741, 19.34644, 24.4461, -18.63368, -16.08809, 281.71983, 78.56522, 19.81667, 48.79602, 103.35709, -4.11112, 104.51745, -25.76131, -0.56993, 64.94069, -5.16895, -2.53993, 226.37458, -414.76055, -228.73137, -52.66531, 132.22331, 72.69058, -24.76288, 95.53154, 9.84646, -3.28098, 23.41726, -32.88612, -7.30866, 3.52988, -28.36488, 61.13645, 33.08482, 27.27311, 25.62131, 52.05437, -140.75385, -5.60029, 162.56102, -18.90804, 2.75065, -72.80371, 3.33472, 69.65002, 26.94925, -72.25641, -41.06735, 74.71573, 83.05676, 51.20302, 117.22911, -23.45756, 52.62572, -34.57399, 14.47448, -12.60064, 34.55631, -31.87637, -15.91839, -8.64084, -57.03877, -52.65046, 49.79163, 34.47499, 52.27358, 12.04486, -16.32851, -0.71206, -60.94553, 44.49823, -346.53889, 26.32134, 33.31534, -14.82096, 127.46024, 5.26653, -54.84037, 63.23515, 11.33492, 11.37452, -384.18526, 33.68798, 5.76151, 1.67019, 10.06354, -89.19445, 12.73853, -59.79295, -0.85772, -59.86578, 17.36654, -106.19471, -7.90404, -168.55163, 24.76854, -4.45124, 218.1085, 15.83141, -202.65327, 109.04647, 6.65741, -131.53883, -42.18882, -158.90811, 13.7108, -304.52261, 65.4498, 1.01328, -8.11759, -133.99744, -4.19173, 11.66726, 127.06002, -12.86369, -6.47003, 188.26506, 46.15145, -20.33922, 398.73186, -83.08858, -240.04861, -3.53624, -196.59336, -280.62523, 252.28863, 4.83095, -87.21172, 196.72276, 31.25412, -1259.35718, 42.495, -8.95197, -11.26421, 2.25496, -4.51134, 4.51417, 0.0, -47.47303, -22.61327, 2.26203, 9.04814, 2.26769, 6.8052, 63.55476, -2.27193, 29.53514, -25.03794, 2.27971, 15.96789, 75.30051]

back_coup  = [1.76783972e-10, 4.10444212e-09, 4.38923621e-08, 3.04210601e-07,
       1.57146407e-06, 6.52538999e-06, 2.28322968e-05, 6.95130658e-05,
       1.88461395e-04, 4.63029925e-04, 1.04506040e-03, 2.19051571e-03,
       4.30208482e-03, 7.97508786e-03, 1.40411527e-02, 2.36029230e-02,
       3.80528385e-02, 5.90699458e-02, 8.85906646e-02, 1.28752160e-01,
       1.81810026e-01, 2.50034922e-01, 3.35595175e-01, 4.40433950e-01,
       5.66150122e-01, 7.13891620e-01, 8.84268773e-01, 1.07729331e+00,
       1.29234650e+00, 1.52817761e+00, 1.78293169e+00, 2.05420415e+00,
       2.33911790e+00, 2.63441873e+00, 2.93658392e+00, 3.24193994e+00,
       3.54678572e+00, 3.84751914e+00, 4.14076538e+00, 4.42350646e+00,
       4.69321134e+00, 4.94796476e+00, 5.18659139e+00, 5.40876788e+00,
       5.61511158e+00, 5.80722999e+00, 5.98771075e+00, 6.16003088e+00,
       6.32836684e+00, 6.49729763e+00, 6.67141098e+00, 6.85484734e+00,
       7.05084015e+00, 7.26132502e+00, 7.48668637e+00, 7.72568579e+00,
       7.97557990e+00, 8.23239935e+00, 8.49133761e+00, 8.74719167e+00,
       8.99480459e+00, 9.22947381e+00, 9.44730374e+00, 9.64549172e+00,
       9.82254227e+00, 9.97840623e+00, 1.01145398e+01, 1.02338762e+01,
       1.03407014e+01, 1.04404227e+01, 1.05392295e+01, 1.06436485e+01,
       1.07600216e+01, 1.08939478e+01, 1.10497540e+01, 1.12300668e+01,
       1.14355471e+01, 1.16648244e+01, 1.19146305e+01, 1.21800977e+01,
       1.24551620e+01, 1.27330091e+01, 1.30065082e+01, 1.32685951e+01,
       1.35125851e+01, 1.37324095e+01, 1.39227795e+01, 1.40792860e+01,
       1.41984474e+01, 1.42777139e+01, 1.43154405e+01, 1.43108352e+01,
       1.42638901e+01, 1.41753016e+01, 1.40463826e+01, 1.38789730e+01,
       1.36753488e+01, 1.34381346e+01, 1.31702194e+01, 1.28746782e+01,
       1.25547006e+01, 1.22135257e+01, 1.18543854e+01, 1.14804549e+01,
       1.10948111e+01, 1.07003977e+01, 1.02999985e+01, 9.89621603e+00,
       9.49145650e+00, 9.08792036e+00, 8.68759716e+00, 8.29226478e+00,
       7.90349200e+00, 7.52264402e+00, 7.15089034e+00, 6.78921446e+00,
       6.43842497e+00, 6.09916764e+00, 5.77193810e+00, 5.45709483e+00,
       5.15487219e+00, 4.86539329e+00, 4.58868244e+00, 4.32467719e+00,
       4.07323965e+00, 3.83416723e+00, 3.60720255e+00, 3.39204267e+00,
       3.18834742e+00, 2.99574706e+00, 2.81384914e+00, 2.64224460e+00,
       2.48051318e+00, 2.32822822e+00, 2.18496075e+00, 2.05028308e+00,
       1.92377183e+00, 1.80501046e+00, 1.69359144e+00, 1.58911791e+00,
       1.49120511e+00, 1.39948139e+00, 1.31358907e+00, 1.23318492e+00,
       1.15794056e+00, 1.08754258e+00, 1.02169261e+00, 9.60107152e-01,
       9.02517416e-01, 8.48668971e-01, 7.98321393e-01, 7.51247829e-01,
       7.07234520e-01, 6.66080302e-01, 6.27596074e-01, 5.91604260e-01,
       5.57938261e-01, 5.26441908e-01, 4.96968916e-01, 4.69382354e-01,
       4.43554115e-01, 4.19364408e-01, 3.96701264e-01, 3.75460058e-01,
       3.55543048e-01, 3.36858938e-01, 3.19322451e-01, 3.02853931e-01,
       2.87378954e-01, 2.72827966e-01, 2.59135928e-01, 2.46241989e-01,
       2.34089163e-01, 2.22624028e-01, 2.11796435e-01, 2.01559225e-01,
       1.91867960e-01, 1.82680657e-01, 1.73957527e-01, 1.65660715e-01,
       1.57754035e-01, 1.50202702e-01, 1.42973039e-01, 1.36032174e-01,
       1.29347691e-01, 1.22887231e-01, 1.16618027e-01, 1.10506322e-01,
       1.04516628e-01, 9.86107530e-02, 9.27464570e-02, 8.68755234e-02,
       8.09408718e-02, 7.48719930e-02, 6.85772755e-02, 6.19300682e-02,
       5.47406482e-02, 4.66911122e-02, 3.71460374e-02, 2.43093082e-02]

back_freq = [  0.63503484,   0.83242449,   1.03233903,   1.24251728,
         1.46583262,   1.70380051,   1.95738665,   2.22728314,
         2.51402528,   2.81804841,   3.13971858,   3.47935036,
         3.83721799,   4.21356266,   4.60859753,   5.02251137,
         5.45547124,   5.90762457,   6.37910082,   6.87001282,
         7.38045793,   7.91051895,   8.46026502,   9.02975233,
         9.61902485,  10.22811487,  10.85704369,  11.5058221 ,
        12.17445101,  12.86292197,  13.57121777,  14.29931308,
        15.04717518,  15.8147647 ,  16.60203659,  17.40894112,
        18.23542501,  19.08143271,  19.94690752,  20.83179269,
        21.73603194,  22.65956924,  23.60234741,  24.56430477,
        25.54536959,  26.54545172,  27.56443126,  28.60214505,
        29.65837221,  30.73282143,  31.82512341,  32.93483198,
        34.0614361 ,  35.20438236,  36.36310471,  37.53705578,
        38.72573378,  39.9287009 ,  41.14559158,  42.37611175,
        43.62003153,  44.87717409,  46.147403  ,  47.43060923,
        48.72669837,  50.03557796,  51.35714443,  52.69126918,
        54.03778382,  55.39646478,  56.76701885,  58.14907169,
        59.54216224,  60.94574579,  62.3592073 ,  63.78188437,
        65.21309681,  66.65217759,  68.09849992,  69.55149637,
        71.01066818,  72.47558553,  73.94588108,  75.42123938,
        76.9013849 ,  78.38607035,  79.87506646,  81.36815364,
        82.86511557,  84.36573452,  85.86978813,  87.37704724,
        88.88727466,  90.40022452,  91.91564201,  93.43326348,
        94.9528167 ,  96.47402121,  97.99658878,  99.52022391,
       101.04462423, 102.56948109, 104.09447992, 105.61930073,
       107.14361849, 108.66710354, 110.18942198, 111.71023597,
       113.22920409, 114.74598164, 116.26022094, 117.77157156,
       119.27968067, 120.78419319, 122.28475207, 123.78099855,
       125.27257233, 126.75911177, 128.24025416, 129.71563584,
       131.18489245, 132.64765908, 134.10357046, 135.55226114,
       136.99336568, 138.42651878, 139.85135548, 141.26751131,
       142.67462248, 144.07232598, 145.46025979, 146.83806302,
       148.20537605, 149.56184071, 150.90710039, 152.24080021,
       153.5625872 , 154.87211036, 156.16902089, 157.45297228,
       158.72362047, 159.98062399, 161.22364406, 162.45234481,
       163.66639331, 164.8654598 , 166.04921774, 167.217344  ,
       168.36951895, 169.50542661, 170.62475476, 171.7271951 ,
       172.8124433 , 173.8801992 , 174.93016688, 175.96205478,
       176.97557585, 177.97044762, 178.94639233, 179.90313707,
       180.84041383, 181.75795965, 182.6555167 , 183.53283241,
       184.38965953, 185.22575626, 186.04088635, 186.83481914,
       187.60732974, 188.35819902, 189.08721377, 189.79416677,
       190.47885683, 191.14108892, 191.78067421, 192.39743019,
       192.99118068, 193.56175594, 194.10899272, 194.63273436,
       195.13283077, 195.60913858, 196.06152114, 196.48984858,
       196.89399787, 197.27385288, 197.62930439, 197.96025016,
       198.26659495, 198.54825058, 198.80513593, 199.03717701,
       199.24430697, 199.42646611, 199.58360194, 199.71566921,
       199.82262995, 199.90445368, 199.96111833, 199.99262015]


coup_num_1 = coup_num_1 + list([1.15*x for x in back_coup])
coup_num_2 = coup_num_2 + list([-1.15*x for x in back_coup])

coup_mat = [np.diag([x, -x]) for x, y in zip(coup_num_1, coup_num_2)]
freq_num = [6.0, 20.0, 43.0, 53.0, 59.0, 63.0, 84.0, 88.0, 120.0, 132.0, 144.0, 148.0, 160.0, 201.0, 216.0, 237.0, 279.0, 282.0, 295.0, 304.0, 327.0, 342.0, 390.0, 396.0, 403.0, 410.0, 430.0, 449.0, 458.0, 470.0, 475.0, 490.0, 496.0, 514.0, 515.0, 534.0, 557.0, 580.0, 581.0, 604.0, 608.0, 624.0, 647.0, 655.0, 659.0, 665.0, 671.0, 688.0, 696.0, 720.0, 744.0, 764.0, 778.0, 780.0, 786.0, 788.0, 794.0, 811.0, 818.0, 832.0, 839.0, 842.0, 859.0, 873.0, 886.0, 889.0, 890.0, 891.0, 905.0, 920.0, 938.0, 940.0, 949.0, 967.0, 978.0, 995.0, 999.0, 1002.0, 1004.0, 1007.0, 1014.0, 1015.0, 1021.0, 1034.0, 1047.0, 1048.0, 1048.0, 1064.0, 1124.0, 1132.0, 1145.0, 1149.0, 1156.0, 1162.0, 1164.0, 1181.0, 1186.0, 1190.0, 1201.0, 1208.0, 1213.0, 1227.0, 1228.0, 1231.0, 1242.0, 1248.0, 1251.0, 1259.0, 1307.0, 1317.0, 1333.0, 1341.0, 1345.0, 1348.0, 1356.0, 1362.0, 1385.0, 1412.0, 1424.0, 1433.0, 1435.0, 1469.0, 1482.0, 1500.0, 1510.0, 1516.0, 1525.0, 1539.0, 1554.0, 1598.0, 1644.0, 1655.0, 1656.0, 1667.0, 1685.0, 1696.0, 1699.0, 1708.0, 1713.0, 1728.0, 1768.0, 1781.0, 3163.0, 3165.0, 3186.0, 3189.0, 3190.0, 3192.0, 3195.0, 3197.0, 3198.0, 3199.0, 3199.0, 3207.0, 3208.0, 3210.0, 3213.0, 3213.0, 3219.0, 3224.0, 3226.0, 3227.0]
freq_num = freq_num + back_freq
reorg = sum([(coup_num_1[i]-coup_num_2[i]) ** 2 / freq_num[i] for i in range(len(freq_num))])

print("Reorg",reorg)

# exit()
temp = 300
eth = SpinBoson(pd, coup_mat=coup_mat, freq=freq_num, temp=temp)
etn = SpinBoson1D(pd)

# set the initial state of the system. It's in the high-energy state |0>:
# if you doubt this, pls check the definition of sigma_z
etn.B[-1][0, 1, 0] = 0.
etn.B[-1][0, 0, 0] = 1.


# spectral density parameters

eth.h1e =  134.56223*sigma_x + np.diag([0, -2000])

eth.build(n=0)
# exit()
# print(eth.w_list,eth.k_list)
#
# print(len(eth.w_list))
# exit()

# b = np.array([np.abs(eth.get_dk(t=i*0.2/100)) for i in range(100)])
# print(b.shape)
# bj, freq, coef = eth.get_dk(1, star=True)
coef = eth.get_dk(1, star=True)
# indexes = np.abs(freq).argsort()
# bj = bj[indexes]
# bj = np.array(bj)
# print(b.shape)
# b.astype('float32').tofile('./DA2/dk.dat')
# bj.astype('float32').tofile('./output/j0.dat')
# freq.astype('float32').tofile('./output/freq.dat')
# coup_num = np.array([[freq_num[n], coup_num[n]] for n in range(len(freq_num))])
# coup_num.astype('float32').tofile('./DA2/coup.dat')
# spacing = [freq_num[i+1]-freq_num[i] for i in range(161)]
# rms = np.sqrt(sum([x**2 for x in spacing])/161)
# print(rms)
# coef.astype('float32').tofile('./DA2/coef.dat')

# print(freq)
# print(coef)
# exit()


# U_one = eth.get_u(dt=0.002, t=0.2)

# ~ 0.5 ps ~ 0.1T
p = []


threshold = 1e-3
dt = 0.001/8
num_steps = 50*4*2*2

s_dim = np.empty([0,0])
num_l = np.empty([0,0])
t = 0.
tt0=time()
for tn in range(num_steps):
    U1, U2 = eth.get_u(2*tn*dt, 2*dt, factor=2)

    t0 = time()
    etn.U = U1
    for j in range(bath_length-1,0,-1):
        print("j==", j, tn)
        etn.update_bond(j, bond_dim, threshold, swap=1)

    etn.update_bond(0, bond_dim, threshold, swap=0)
    etn.update_bond(0, bond_dim, threshold, swap=0)
    t1 = time()
    t = t + t1 - t0

    t0 = time()
    etn.U = U2
    for j in range(1, bath_length):
        print("j==", j, tn)
        etn.update_bond(j, bond_dim, threshold,swap=1)

    dim = [len(s) for s in etn.S]
    s_dim = np.append(s_dim, dim)
    print("Length", len(dim))
    theta = etn.get_theta1(bath_length) # c.shape vL i vR
    rho = np.einsum('LiR,LjR->ij',  theta, theta.conj())

    pop = np.einsum('ij,ji', rho, sigma_z)
    p = p + [pop]
    t1 = time()
    t = t + t1 - t0
    numExp = []
    for i, pd in enumerate(a[::-1]):
        theta = etn.get_theta1(i)
        rho = np.einsum('LiR,LjR->ij', theta, theta.conj())
        numExp.append(np.einsum('ij,ji', rho, _num(pd)).real)
    num_l = np.append(num_l, numExp)
tt1 = time()
print(tt1-tt0)
pop = [x.real for x in p]
print("population", pop)
pop = np.array(pop)

s_dim.astype('float32').tofile('./output/dim.dat')
pop.astype('float32').tofile('./output/pop.dat')
num_l.astype('float32').tofile('./output/num_ic.dat')