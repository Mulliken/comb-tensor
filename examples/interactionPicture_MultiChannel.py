import numpy as np
from fishbonett.backwardSpinBosonMultiChannel import SpinBoson, SpinBoson1D, calc_U
from fishbonett.stuff import sigma_x, sigma_z, temp_factor, sd_zero_temp, drude1, lemmer, drude, _num, sigma_1
from time import time

bath_length = 100
phys_dim = 10
bond_dim = 1000
a = [np.ceil(phys_dim - N*(phys_dim -2)/ bath_length) for N in range(bath_length)]
a = [int(x) for x in a]

a = [phys_dim]*bath_length
print(a)
pd = a[::-1] + [2]
coup_num = [54.30698600319483, 55.955795639343734, 6.36239423953112, 71.47950977809305, 7.414381606206279, 53.58528275178161, 14.381509157906146, 20.893076081283944, 7.71767036118638, 25.422428466426013, 53.27351616318288, 15.107995048800193, 138.16470359465342, 27.698253874102733, 20.214097042971616, 94.19116315630625, 360.0436863202491, 102.67392271570256, 93.48166504017216, 32.616515304164665, 207.79381375149038, 266.3178092874074, 4.972741958366987, 309.4101655514287, 156.8348887774295, 321.1104932528442, 145.6502634421156, 44.98622638818791, 110.93670256658902, 312.42265403985374, 275.4797659600066, 421.8241616461859, 49.709716111898395, 9.188139206956727, 5.125220711342738, 38.79874143724021, 41.271874303592234, 73.31933683270623, 30.82724334769138, 50.03174246645565, 0.05372268877576348, 6.9173480303650035, 6.009996179246495, 119.31815489904147, 32.07249709245693, 160.80544731221693, 134.19281954782304, 220.19434900368339, 36.17101319392367, 48.5339680563894, 71.84925210178939, 42.43538482792926, 348.0500521796633, 28.40038480185397, 10.256837529797604, 124.60763358467145, 67.69051338432766, 46.64083413331665, 230.6620383272989, 20.75874886810354, 58.35970024224299, 51.082564467371, 26.508329796158378, 27.324414889440856, 30.297175202851655, 2.973104818000304, 30.46028668817085, 37.87091579080565, 38.05623284458992, 4.862822252314482, 8.175256233346978, 37.19875009713766, 18.989481333067893, 3.374642401020314, 35.498031227454284, 35.004682873150074, 34.27619910736292, 44.66092089134683, 78.56987477624054, 2.6051714769359307, 86.78341915890141, 5.718239558073076, 495.4248541517992, 8.468234743666612, 23.291285485162728, 69.34755999463768, 366.7635192137395, 29.13441665939829, 140.1936281824413, 9.946973557858174, 0.6850346127863536, 1.189340462766485, 24.78774323515158, 598.4158393493083, 7.855318230577269, 5.83071883408221, 19.02103972955675, 27.970298930588076, 327.5372532476008, 147.26449245943198, 159.810098957674, 160.61871354148704, 26.134184883791118, 44.86577995433856, 52.33408715005395, 30.911827590585755, 176.242135619234, 22.62158254511001, 5.146879268189698, 26.00168334607952, 9.714351664062491, 32.69071447612766, 81.98955468467669, 117.43004873550422, 54.832912251544265, 67.24417532822591, 137.60057007558714, 7.158397415602887, 103.01487218381097, 300.0434174964447, 804.3449135157551, 38.779944947168616, 38.89877531525447, 13.246544701333889, 92.30230140733454, 60.618596223639415, 7.02917864220066, 5.811374242199373, 89.23199921080061, 252.25659297438145, 382.48545233855236, 19.119975270426192, 81.02820587279176, 395.9455020912637, 155.50886600231286, 14.282401073750307, 93.40829316774523, 68.58453988102637, 205.53089984644234, 216.17796779509547, 183.11798538053975, 1634.4710549902481, 5.608143491888584, 11.760356088856774, 83.03881114465122, 6.092772502291665, 31.374080332530514, 107.70159177851119, 32.92798854046753, 83.43585078016142, 33.88134696262631, 102.96201811678885, 49.55814904187221, 1.703574886685197, 56.34101622325312, 23.523010879133007, 143.9892408749686, 33.08067154787991, 234.09051719556, 468.0071321295673, 56.542812415462066, 286.4972975945905]

coup_mat = [(sigma_z + sigma_1)/2 *x for x in coup_num]
freq_num = [18.572, 21.72, 37.891, 52.565, 60.615, 64.971, 80.889, 88.074, 112.592, 138.551, 142.569, 146.516, 166.674, 204.207, 216.366, 239.614, 280.029, 283.257, 287.474, 303.598, 321.116, 329.261, 376.791, 387.75, 399.812, 406.454, 417.961, 422.804, 454.782, 458.857, 471.95, 477.893, 488.212, 512.784, 525.628, 529.697, 533.97, 556.442, 578.298, 602.653, 607.755, 616.107, 631.276, 640.419, 650.535, 665.203, 673.497, 686.587, 692.573, 715.989, 744.641, 745.447, 746.097, 751.97, 776.837, 787.433, 791.605, 804.413, 810.68, 815.982, 832.808, 834.649, 838.626, 866.385, 870.666, 880.604, 889.432, 892.693, 901.346, 914.698, 919.939, 935.008, 940.838, 943.514, 947.791, 964.873, 965.818, 968.934, 978.138, 999.553, 1002.582, 1007.554, 1021.853, 1034.193, 1046.335, 1063.733, 1077.217, 1081.99, 1114.781, 1121.615, 1130.876, 1142.351, 1153.189, 1157.406, 1170.153, 1181.259, 1182.627, 1185.69, 1194.825, 1207.159, 1213.832, 1220.851, 1227.325, 1230.285, 1240.632, 1243.084, 1246.538, 1286.335, 1296.583, 1299.631, 1318.441, 1323.998, 1339.241, 1346.992, 1356.183, 1361.592, 1377.941, 1385.155, 1389.363, 1423.826, 1431.468, 1445.447, 1467.45, 1479.565, 1489.173, 1513.744, 1516.389, 1521.855, 1537.489, 1561.151, 1561.342, 1609.616, 1630.399, 1636.994, 1642.361, 1666.601, 1678.231, 1689.423, 1696.969, 1726.421, 1767.586, 1811.44, 3163.242, 3164.383, 3184.283, 3192.012, 3192.347, 3193.251, 3196.395, 3197.736, 3202.845, 3203.702, 3204.149, 3207.079, 3207.153, 3214.243, 3218.764, 3219.128, 3219.477, 3223.965, 3234.558, 3235.424]


temp = 300
eth = SpinBoson(pd, coup_mat=coup_mat, freq=freq_num, temp=temp)
etn = SpinBoson1D(pd)
# set the initial state of the system. It's in the high-energy state |0>:
# if you doubt this, pls check the definition of sigma_z
etn.B[-1][0, 1, 0] = 0.
etn.B[-1][0, 0, 0] = 1.


# spectral density parameters

eth.h1e =  -4540.90144  * (sigma_z + sigma_1)/2 + 34.56223*sigma_x
eth.h1e =  34.56223*sigma_x

eth.build(n=0)
# exit()
# print(eth.w_list,eth.k_list)
#
# print(len(eth.w_list))
# exit()

# b = np.array([np.abs(eth.get_dk(t=i*0.2/100)) for i in range(200)])
# bj, freq, coef = eth.get_dk(1, star=True)
# indexes = np.abs(freq).argsort()
# bj = bj[indexes]
# bj = np.array(bj)
# print(b.shape)
# b.astype('float32').tofile('./output/dk.dat')
# bj.astype('float32').tofile('./output/j0.dat')
# freq.astype('float32').tofile('./output/freq.dat')
# coef.astype('float32').tofile('./output/coef.dat')

# print(freq)
# print(coef)
# exit()


# U_one = eth.get_u(dt=0.002, t=0.2)

# ~ 0.5 ps ~ 0.1T
p = []


threshold = 5e-3
dt = 0.001
num_steps = 200

s_dim = np.empty([0,0])
num_l = np.empty([0,0])
t = 0.
tt0=time()
for tn in range(num_steps):
    U1, U2 = eth.get_u(2*tn*dt, 2*dt, factor=2)

    t0 = time()
    etn.U = U1
    for j in range(bath_length-1,0,-1):
        print("j==", j, tn)
        etn.update_bond(j, bond_dim, threshold, swap=1)

    etn.update_bond(0, bond_dim, threshold, swap=0)
    etn.update_bond(0, bond_dim, threshold, swap=0)
    t1 = time()
    t = t + t1 - t0

    t0 = time()
    etn.U = U2
    for j in range(1, bath_length):
        print("j==", j, tn)
        etn.update_bond(j, bond_dim, threshold,swap=1)

    dim = [len(s) for s in etn.S]
    s_dim = np.append(s_dim, dim)
    print("Length", len(dim))
    theta = etn.get_theta1(bath_length) # c.shape vL i vR
    rho = np.einsum('LiR,LjR->ij',  theta, theta.conj())

    pop = np.einsum('ij,ji', rho, sigma_z)
    p = p + [pop]
    t1 = time()
    t = t + t1 - t0
    numExp = []
    for i, pd in enumerate(a[::-1]):
        theta = etn.get_theta1(i)
        rho = np.einsum('LiR,LjR->ij', theta, theta.conj())
        numExp.append(np.einsum('ij,ji', rho, _num(pd)).real)
    num_l = np.append(num_l, numExp)
tt1 = time()
print(tt1-tt0)
pop = [x.real for x in p]
print("population", pop)
pop = np.array(pop)

s_dim.astype('float32').tofile('./output/dim.dat')
pop.astype('float32').tofile('./output/pop.dat')
num_l.astype('float32').tofile('./output/num_ic.dat')