import numpy as np
from fishbonett.backwardSpinBosonMultiChannel import SpinBoson, SpinBoson1D, calc_U
from fishbonett.stuff import sigma_x, sigma_z, temp_factor, sd_zero_temp, drude1, lemmer, drude, _num, sigma_1
from time import time

bath_length = 162*2
phys_dim = 10
bond_dim = 1000
a = [np.ceil(phys_dim - N*(phys_dim -2)/ bath_length) for N in range(bath_length)]
a = [int(x) for x in a]

a = [phys_dim]*bath_length
print(a)
pd = a[::-1] + [2]
coup_num = [42.32029933179933, 43.60518222585041, 4.958080875046767, 55.70248825300698, 5.777872646373296, 41.757891069504254, 11.207209554398696, 16.281537584685267, 6.014219235262827, 19.811167247932186, 41.51493788203816, 11.773344827697722, 107.66886626466584, 21.58467042990084, 15.752423408846004, 73.40120512213151, 280.57452086737084, 80.01164238138605, 72.84830806670708, 25.417368784768467, 161.92937676088113, 207.5359034981077, 3.875153892088735, 241.11687622781565, 122.21815142419811, 250.23469710218572, 113.50220662702846, 35.05682614100884, 86.45065405074483, 243.46444555446269, 214.6756248744066, 328.71875425385775, 38.7377429752877, 7.160124878183711, 3.9939773979134476, 30.23504841945189, 32.162309180805345, 57.13622702955024, 24.02302653974885, 38.98869138396554, 0.0418649687126009, 5.390544767298586, 4.683464430777268, 92.98214470507295, 24.99342676080737, 125.3123247170549, 104.57366002797333, 171.59285474723933, 28.18731471143066, 37.82150708539695, 55.990620719307806, 33.06900861838314, 271.2281324142201, 22.131826389371653, 7.992939148439056, 97.10412490982718, 52.749802542519824, 36.34622738022405, 179.750106292402, 16.176859194507866, 45.47849484816758, 39.807575010108245, 20.657387461964486, 21.293345521318063, 23.609955511381543, 2.31687845529092, 23.737064883327847, 29.512013282084464, 29.65642698950281, 3.789495762169101, 6.370806343203226, 28.988208603347143, 14.79810597707948, 2.6297883027527975, 27.662873928356973, 27.27841786541552, 26.710725689962164, 34.80332236527391, 61.22786152773929, 2.0301556913526437, 67.62850502559017, 4.456104592774713, 386.07423587977667, 6.599118373883443, 18.150412057419135, 54.0411043384055, 285.8111462160038, 22.703842076792142, 109.24996479721521, 7.7514686303763245, 0.5338331584827084, 0.9268281688241236, 19.316570310303828, 466.3329584275366, 6.1214853434328536, 4.543757342073865, 14.822698775983133, 21.796669457457227, 255.24293686521972, 114.76014156745924, 124.53667054428985, 125.16680699172618, 20.365824150313923, 34.9629647520956, 40.782860483482956, 24.088941272667984, 137.34181333213323, 17.62852655110969, 4.010855458662469, 20.262568470877973, 7.570191249672777, 25.47519064892902, 63.89274661886632, 91.51078302784029, 42.730142666785525, 52.40198062258694, 107.22924880203254, 5.578389515972602, 80.27733717701543, 233.8175652067778, 626.8091825975107, 30.220400707531912, 30.31300273016681, 10.32275547089892, 71.92925463295936, 47.23880528201253, 5.477692026162572, 4.528682505866144, 69.53663229172403, 196.5782914645209, 298.06292015679054, 14.8997971755132, 63.143587579201586, 308.5520556525837, 121.1848095856284, 11.129976695491198, 72.79113089978681, 53.44649870880355, 160.16593524309752, 168.46297280225244, 142.7000193655489, 1273.70913738943, 4.370309029089642, 9.164599742281558, 64.71041025166919, 4.747970289538262, 24.449165174706962, 83.92959981814698, 25.66009336892061, 65.01981494263089, 26.403025664848023, 80.23614910708373, 38.619629924934024, 1.3275603093571118, 43.90537657688394, 18.33099081454302, 112.20780645106582, 25.779076045959453, 182.42184822904758, 364.7081780597264, 44.062632132509826, 223.2613570423772]
coup_mat = [(sigma_z + sigma_1)/2 *x for x in coup_num]
freq_num = [18.572, 21.72, 37.891, 52.565, 60.615, 64.971, 80.889, 88.074, 112.592, 138.551, 142.569, 146.516, 166.674, 204.207, 216.366, 239.614, 280.029, 283.257, 287.474, 303.598, 321.116, 329.261, 376.791, 387.75, 399.812, 406.454, 417.961, 422.804, 454.782, 458.857, 471.95, 477.893, 488.212, 512.784, 525.628, 529.697, 533.97, 556.442, 578.298, 602.653, 607.755, 616.107, 631.276, 640.419, 650.535, 665.203, 673.497, 686.587, 692.573, 715.989, 744.641, 745.447, 746.097, 751.97, 776.837, 787.433, 791.605, 804.413, 810.68, 815.982, 832.808, 834.649, 838.626, 866.385, 870.666, 880.604, 889.432, 892.693, 901.346, 914.698, 919.939, 935.008, 940.838, 943.514, 947.791, 964.873, 965.818, 968.934, 978.138, 999.553, 1002.582, 1007.554, 1021.853, 1034.193, 1046.335, 1063.733, 1077.217, 1081.99, 1114.781, 1121.615, 1130.876, 1142.351, 1153.189, 1157.406, 1170.153, 1181.259, 1182.627, 1185.69, 1194.825, 1207.159, 1213.832, 1220.851, 1227.325, 1230.285, 1240.632, 1243.084, 1246.538, 1286.335, 1296.583, 1299.631, 1318.441, 1323.998, 1339.241, 1346.992, 1356.183, 1361.592, 1377.941, 1385.155, 1389.363, 1423.826, 1431.468, 1445.447, 1467.45, 1479.565, 1489.173, 1513.744, 1516.389, 1521.855, 1537.489, 1561.151, 1561.342, 1609.616, 1630.399, 1636.994, 1642.361, 1666.601, 1678.231, 1689.423, 1696.969, 1726.421, 1767.586, 1811.44, 3163.242, 3164.383, 3184.283, 3192.012, 3192.347, 3193.251, 3196.395, 3197.736, 3202.845, 3203.702, 3204.149, 3207.079, 3207.153, 3214.243, 3218.764, 3219.128, 3219.477, 3223.965, 3234.558, 3235.424]


temp = 1000
eth = SpinBoson(pd, coup_mat=coup_mat, freq=freq_num, temp=temp)
etn = SpinBoson1D(pd)
# set the initial state of the system. It's in the high-energy state |0>:
# if you doubt this, pls check the definition of sigma_z
etn.B[-1][0, 1, 0] = 0.
etn.B[-1][0, 0, 0] = 1.


# spectral density parameters

eth.h1e =  (-4540.90144  + 4127.9476)* (sigma_z + sigma_1)/2 + 34.56223*sigma_x

eth.build(n=0)
# exit()
# print(eth.w_list,eth.k_list)
#
# print(len(eth.w_list))
# exit()

# b = np.array([np.abs(eth.get_dk(t=i*0.2/100)) for i in range(100)])
# print(b.shape)
# bj, freq, coef = eth.get_dk(1, star=True)
coef = eth.get_dk(1, star=True)
# indexes = np.abs(freq).argsort()
# bj = bj[indexes]
# bj = np.array(bj)
# print(b.shape)
# b.astype('float32').tofile('./DA2/dk.dat')
# bj.astype('float32').tofile('./output/j0.dat')
# freq.astype('float32').tofile('./output/freq.dat')
coup_num = np.array([[freq_num[n], coup_num[n]] for n in range(len(freq_num))])
coup_num.astype('float32').tofile('./DA2/coup.dat')
spacing = [freq_num[i+1]-freq_num[i] for i in range(161)]
rms = np.sqrt(sum([x**2 for x in spacing])/161)
print(rms)
coef.astype('float32').tofile('./DA2/coef.dat')

# print(freq)
# print(coef)
exit()


# U_one = eth.get_u(dt=0.002, t=0.2)

# ~ 0.5 ps ~ 0.1T
p = []


threshold = 1e-4
dt = 0.001/8
num_steps = 50*8

s_dim = np.empty([0,0])
num_l = np.empty([0,0])
t = 0.
tt0=time()
for tn in range(num_steps):
    U1, U2 = eth.get_u(2*tn*dt, 2*dt, factor=2)

    t0 = time()
    etn.U = U1
    for j in range(bath_length-1,0,-1):
        print("j==", j, tn)
        etn.update_bond(j, bond_dim, threshold, swap=1)

    etn.update_bond(0, bond_dim, threshold, swap=0)
    etn.update_bond(0, bond_dim, threshold, swap=0)
    t1 = time()
    t = t + t1 - t0

    t0 = time()
    etn.U = U2
    for j in range(1, bath_length):
        print("j==", j, tn)
        etn.update_bond(j, bond_dim, threshold,swap=1)

    dim = [len(s) for s in etn.S]
    s_dim = np.append(s_dim, dim)
    print("Length", len(dim))
    theta = etn.get_theta1(bath_length) # c.shape vL i vR
    rho = np.einsum('LiR,LjR->ij',  theta, theta.conj())

    pop = np.einsum('ij,ji', rho, sigma_z)
    p = p + [pop]
    t1 = time()
    t = t + t1 - t0
    numExp = []
    for i, pd in enumerate(a[::-1]):
        theta = etn.get_theta1(i)
        rho = np.einsum('LiR,LjR->ij', theta, theta.conj())
        numExp.append(np.einsum('ij,ji', rho, _num(pd)).real)
    num_l = np.append(num_l, numExp)
tt1 = time()
print(tt1-tt0)
pop = [x.real for x in p]
print("population", pop)
pop = np.array(pop)

s_dim.astype('float32').tofile('./output/dim.dat')
pop.astype('float32').tofile('./output/pop.dat')
num_l.astype('float32').tofile('./output/num_ic.dat')